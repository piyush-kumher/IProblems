package com.piyush.psds.graph.leetcode;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class MinimumMalwareSpread {

    /**
     * Runtime: 17 ms, faster than 39.54% of Java online submissions for Minimize Malware Spread.
     * Memory Usage: 69.9 MB, less than 6.39% of Java online submissions for Minimize Malware Spread.
     */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if(graph == null || graph.length == 0){
            return 0;
        }
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        for(int i=0; i < n; i++){
            for(int j=0; j < n; j++){
                if(graph[i][j] == 1){
                    uf.union(i, j);
                }
            }
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : initial) {
            int r = uf.find(i);
            map.put(r, map.getOrDefault(i, 0) + 1);
        }
        Arrays.sort(initial);
        int result = -1, max = -1;
        for(int i: initial){
            int root = uf.find(i);
            int saved = map.get(root) == 1 ? uf.getSize(root) : 0;
            if (saved > max) {
                result = i;
                max = saved;
            }
        }
        return result;
    }

    class UnionFind{
        int[] parent;
        int[] size;
        UnionFind(int N){
            parent = new int[N];
            size = new int[N];
            for(int i=0; i < N; i++){
                parent[i] = i;
                size[i] = 1;
            }
        }
        public int find(int p){
            if(parent[p] == p){
                return p;
            }
            return find(parent[p]);
        }
        public void union(int p, int q){
            int rootP = find(p);
            int rootQ = find(q);
            if(rootP == rootQ){
                return;
            }
            parent[rootQ] = rootP;
            size[rootP] += size[rootQ];
        }
        public int getSize(int p){
            return size[p];
        }
    }

    public static void main(String[] args) {
        int[][] arr = {{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
        int[] initials = {3,1};
        MinimumMalwareSpread mms = new MinimumMalwareSpread();
        System.out.println(mms.minMalwareSpread(arr, initials));
    }
}
